---
import Layout from '../layouts/Layout.astro';
import NavBar from '../components/NavBarCentered.astro';
---

<Layout title="Wordle Game">
    <div class="min-h-screen bg-gray-900 text-white flex flex-col items-center p-5">
        <NavBar
                link1name="Love"
                link1="/home"
                link2name="Fan"
                link2="/fan"
                link3name="Wordle"
                link3="/wordle"
        />
        <div class="w-full max-w-md mt-10">
            <div id="wordle-game" class="space-y-6">
                <p class="text-xl text-center">Guess the word:</p>
                <div id="guesses" class="grid grid-cols-5 gap-4 text-center text-xl font-bold">
                    <!-- JavaScript will populate this -->
                </div>
                <div class="flex items-center justify-center mt-5">
                    <label for="guess-input"></label><input type="text" id="guess-input" maxlength="5" class="w-2/3 p-2 border-b-2 border-white bg-transparent text-center text-xl outline-none" />
                    <button id="submit-guess" class="ml-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded">Submit</button>
                </div>
                <p id="result-message" class="text-center text-lg mt-5"></p>
                <button id="reset-game" class="mt-5 px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-bold rounded">Reset Game</button>
            </div>
            <div id="streak-counter" class="text-center mt-10">
                <p class="text-lg">Current Streak: <span id="streak" class="font-bold text-xl"></span></p>
            </div>
            <div id="leaderboard" class="mt-10">
                <p class="text-lg text-center">Leaderboard:</p>
                <ul id="leaderboard-list" class="list-none text-center">
                    <!-- JavaScript will populate this -->
                </ul>
            </div>
            <div id="initials-entry" class="text-center mt-5">
                <label for="player-initials"></label><input type="text" id="player-initials" maxlength="3" placeholder="Your initials" class="p-2 border-b-2 border-white bg-transparent text-center text-xl outline-none uppercase" />
                <button id="save-score" class="ml-4 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-bold rounded">Save Score</button>
            </div>
        </div>
    </div>

    <script is:inline>
        document.addEventListener('DOMContentLoaded', async () => {
            const maxGuesses = 6;
            let currentGuess = '';
            let guesses = [];
            let streak = parseInt(localStorage.getItem('wordleStreak') || '0', 10);
            let gameActive = true;
            let randomWord = '';

            // Function to fetch a new random word
            async function fetchRandomWord() {
                const response = await fetch('/api/random-word');
                const data = await response.json();
                return data.word.toLowerCase();
            }

            // Function to render the current guesses
            function renderGuesses() {
                const guessesContainer = document.getElementById('guesses');
                guessesContainer.innerHTML = '';
                guesses.forEach(guess => {
                    guess.split('').forEach((letter, index) => {
                        const letterSpan = document.createElement('span');
                        letterSpan.className = 'w-full h-12 flex items-center justify-center rounded bg-gray-800 text-white';
                        if (letter === randomWord[index]) {
                            letterSpan.classList.add('bg-green-500');
                        } else if (randomWord.includes(letter)) {
                            letterSpan.classList.add('bg-yellow-500');
                        } else {
                            letterSpan.classList.add('bg-gray-500');
                        }
                        letterSpan.innerText = letter;
                        guessesContainer.appendChild(letterSpan);
                    });
                });
            }

            // Function to reset the game
            async function resetGame() {
                randomWord = await fetchRandomWord();
                console.log("Random word to guess:", randomWord);  // Debugging line
                guesses = [];
                gameActive = true;
                document.getElementById('result-message').innerText = '';
                document.getElementById('guess-input').value = '';
                renderGuesses();
            }

            // Function to update the leaderboard
            async function updateLeaderboard(initials, streak) {
                const response = await fetch('/api/leaderboard', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ initials, streak }),
                });
                const leaderboard = await response.json();
                await renderLeaderboard(leaderboard);
            }

            // Function to render the leaderboard
            async function renderLeaderboard() {
                const response = await fetch('/api/leaderboard');
                const leaderboard = await response.json();
                const leaderboardList = document.getElementById('leaderboard-list');
                leaderboardList.innerHTML = '';
                leaderboard.forEach(entry => {
                    const listItem = document.createElement('li');
                    listItem.innerText = `${entry.initials.toUpperCase()}: ${entry.streak}`;
                    leaderboardList.appendChild(listItem);
                });
            }

            // Event listener for submitting a guess
            document.getElementById('submit-guess').addEventListener('click', () => {
                if (!gameActive) return;

                currentGuess = document.getElementById('guess-input').value.toLowerCase();
                if (currentGuess.length !== 5) {
                    document.getElementById('result-message').innerText = 'Your guess must be 5 letters long!';
                    return;
                }

                guesses.push(currentGuess);
                document.getElementById('guess-input').value = '';
                renderGuesses();

                if (currentGuess === randomWord) {
                    streak++;
                    localStorage.setItem('wordleStreak', streak.toString());
                    document.getElementById('result-message').innerText = 'You guessed correctly!';
                    gameActive = false;
                } else if (guesses.length >= maxGuesses) {
                    document.getElementById('result-message').innerText = `Game over! The word was ${randomWord}.`;
                    streak = 0;
                    localStorage.setItem('wordleStreak', '0');
                    gameActive = false;
                } else {
                    document.getElementById('result-message').innerText = 'Try again!';
                }

                document.getElementById('streak').innerText = streak;
            });

            // Event listener for resetting the game
            document.getElementById('reset-game').addEventListener('click', resetGame);

            // Event listener for saving the score
            document.getElementById('save-score').addEventListener('click', () => {
                const initials = document.getElementById('player-initials').value.toUpperCase();
                if (initials.length === 3) {
                    updateLeaderboard(initials, streak);
                    document.getElementById('player-initials').value = '';
                } else {
                    alert("Please enter 3 initials.");
                }
            });

            // Initialize the first game and render leaderboard on page load
            await resetGame();
            await renderLeaderboard();
        });
    </script>
</Layout>
